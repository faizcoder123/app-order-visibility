<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_order_sys.ETAComputation</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This helps to commpute ETA.</description>
        <name>ETAComputation</name>
        <script><![CDATA[var ETAComputation = Class.create();

ETAComputation.prototype = {

    computeETA: function(date1, date2) {
        // if (date1 == "" || date2 == "" || date1 == undefined || date2 == undefined || date1 == null || date2 == null) {
        //     return "";
        // }

        const diffTime = Math.abs(date2 - date1);
        var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        if (diffTime < 0) {
            return "Early";
        } else if (diffTime == 0) {
            return "OnTime";
        } else if (diffDays > 0) {
            return "VeryLate";
        } else {
            return "Late";
        }
    },
    compute: function(orderId, destinationFlag, pickupFlag) {
        gs.info("script include");

        var orderTableRec = new GlideRecord('x_snc_order_sys_orders');
        orderTableRec.get('sys_id', orderId);

        var etaTableRec = new GlideRecord('x_snc_order_sys_order_eta_details');
        etaTableRec.get('order_id', orderId);

        if (destinationFlag == true) {

            var mabd = orderTableRec.required_delivery_date;
            var eta = etaTableRec.destination_eta;
            etaTableRec.destination_eta_status = ETAComputation.prototype.computeETA(mabd, eta);

            gs.info("destinationeta " + etaTableRec.destination_eta_status);
        }

        if (pickupFlag == true) {

            var shipDate = orderTableRec.must_by_ship_date;
            var pickupEta = etaTableRec.pickup_eta;

            etaTableRec.eta_status = ETAComputation.prototype.computeETA(shipDate, pickupEta);

            gs.info("pickupeta " + etaTableRec.eta_status);
        }
        if (pickupFlag || destinationFlag) {
            etaTableRec.update();
            gs.info("etaTableRec1 " + etaTableRec.destination_eta_status);
            gs.info("etaTableRec2 " + etaTableRec.eta_status);
            gs.info("etaTableRecorderid " + etaTableRec.order_id);
        }


    },

    type: 'ETAComputation'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-04-04 10:41:38</sys_created_on>
        <sys_id>8eed29a2f8150610f8779df5dbcf0dc6</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>ETAComputation</sys_name>
        <sys_package display_value="Order LifeCycle Visibility System" source="x_snc_order_sys">e1187b5884dd8250f877733a647d5a9c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Order LifeCycle Visibility System">e1187b5884dd8250f877733a647d5a9c</sys_scope>
        <sys_update_name>sys_script_include_8eed29a2f8150610f8779df5dbcf0dc6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-12 00:57:15</sys_updated_on>
    </sys_script_include>
</record_update>
